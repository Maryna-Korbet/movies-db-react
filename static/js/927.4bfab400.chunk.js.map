{"version":3,"file":"static/js/927.4bfab400.chunk.js","mappings":"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","sources":["features/Movies/MovieCard.tsx","features/Movies/MoviesFilter.tsx","features/Movies/Movies.tsx","hooks/useIntersectionObserver.tsx"],"sourcesContent":["import { memo } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Button, Card, CardActions, CardContent, CardMedia, IconButton, Tooltip, Typography } from '@mui/material';\nimport FavoriteIcon  from '@mui/icons-material/Favorite';\n\ninterface Props {\n    id: number;\n    title: string;\n    overview: string;\n    popularity: number;\n    image?: string; \n    enableUserActions?: boolean;\n    onAddToFavorite?(id: number): void;\n}\n\nfunction MovieCard({\n    id,\n    title,\n    overview,\n    popularity,\n    image = \"/thumbnail.jpg\",\n    enableUserActions,\n    onAddToFavorite,\n}: Props) {\n    return (\n        <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n            <CardMedia component=\"div\" image={image} sx={{pt: '56.25%'}} title='Movie thumbnail'/>\n            <CardContent sx={{ flexGrow: 1 }}>\n                <Typography variant='h5' gutterBottom>\n                    {title}\n                </Typography>                \n                <Typography variant='body2' color='secondary'>\n                    {overview}\n                </Typography>\n                <Typography variant='button' display={'block'} mt={2}>\n                    {popularity}\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Button component={RouterLink} to={`/movies/${id}`} color='secondary'>\n                    Details\n                </Button>\n                {enableUserActions &&\n                    <Tooltip title=\"Add to favorites\">\n                        <IconButton onClick={()=> onAddToFavorite?.(id)}>\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>}\n            </CardActions>\n        </Card>\n    );\n}\n\nexport default memo(MovieCard);","import { useState, useMemo } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport FilterAltOutlinedIcon from \"@mui/icons-material/FilterAltOutlined\";\nimport { Autocomplete, FormControl, Paper, TextField, Button, debounce, FormLabel, FormControlLabel, FormGroup, Skeleton, Checkbox } from \"@mui/material\";\nimport { useGetGenresQuery, useGetKeywordsQuery, KeywordItem } from \"../../services/tmdb\";\n\n\nexport interface Filters {\n  keywords: KeywordItem[];\n  genres: number[];\n}\n\ninterface MoviesFilterProps {\n  onApply(filters: Filters): void;\n}\n\nexport function MoviesFilter({ onApply }: MoviesFilterProps) {\n  const { control, handleSubmit, formState } = useForm<Filters>({\n    defaultValues: {\n      keywords: [],\n      genres: [],\n    },\n  });\n\n  const [keywordsQuery, setKeywordsQuery] = useState<string>(\"\");\n  const { data: keywordsOptions = [], isLoading: keywordsLoading } = useGetKeywordsQuery(keywordsQuery, { skip: !keywordsQuery });\n  const { data: genres, isLoading: genresLoading } = useGetGenresQuery();\n\n  const debouncedFetchKeywordsOptions = useMemo(\n    () =>\n      debounce((query: string) => {\n        setKeywordsQuery(query);\n      }, 1000),\n    []\n  );\n\n  \n\n  return (\n    <Paper sx={{ m: 2, p: 0.5, maxWidth: 350 }}>\n      <form onSubmit={handleSubmit(onApply)}>\n        <FormControl sx={{ m: 2, display: \"block\" }} component=\"fieldset\" variant=\"standard\">\n          <Controller\n            name=\"keywords\"\n            control={control}\n            render={({ field: { onChange, value } }) => (\n              <Autocomplete\n                multiple\n                loading={keywordsLoading}\n                disablePortal\n                options={keywordsOptions}\n                filterOptions={(x) => x}\n                getOptionLabel={(option) => option.name}\n                onChange={(_, value) => onChange(value)}\n                value={value}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n                onInputChange={(_, value) => debouncedFetchKeywordsOptions(value)}\n                renderInput={(params) => <TextField {...params} label=\"Keywords\" />}\n              />\n            )}\n          />\n        </FormControl>\n        <FormControl sx={{ m: 2, display: \"block\" }} component=\"fieldset\" variant=\"standard\">\n          {genresLoading ? (\n            <Skeleton width={300} height={480} />\n          ) : (\n            <>\n              <FormLabel component=\"legend\">Genres</FormLabel>\n              <FormGroup sx={{ maxHeight: 500 }}>\n                <Controller\n                  name=\"genres\"\n                  control={control}\n                  render={({ field }) => (\n                    <>\n                      {genres?.map((genre) => (\n                        <FormControlLabel\n                          key={genre.id}\n                          control={\n                            <Checkbox\n                              value={genre.id}\n                              checked={field.value.includes(genre.id)}\n                              onChange={(event, checked) => {\n                                const valueNumber = Number(event.target.value);\n                                if (checked) {\n                                  field.onChange([...field.value, valueNumber]);\n                                } else {\n                                  field.onChange(field.value.filter((value) => value !== valueNumber));\n                                }\n                              }}\n                            />\n                          }\n                          label={genre.name}\n                        />\n                      ))}\n                    </>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n        </FormControl>\n        <Button type=\"submit\" sx={{ m: 2 }} variant=\"contained\" startIcon={<FilterAltOutlinedIcon />} disabled={!formState.isDirty} color=\"primary\">\n          Apply filter\n        </Button>\n      </form>\n    </Paper>\n  );\n}\n","import { useState, useCallback } from 'react';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Container, Grid, LinearProgress, Typography } from '@mui/material';\nimport MovieCard from './MovieCard';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport { MoviesFilter } from './MoviesFilter';\nimport { useGetConfigurationQuery, useGetMoviesQuery, MoviesQuery } from '../../services/tmdb';\n\n\nconst initialQuery = {\n  page: 1,\n  filters: {},\n};\n\nfunction Movies() {\n  const [query, setQuery] = useState<MoviesQuery>(initialQuery);\n  const { isAuthenticated, user } = useAuth0();\n  const { data: configuration } = useGetConfigurationQuery();\n  const { data, isFetching } = useGetMoviesQuery(query);\n  const movies = data?.results;\n  const hasMorePages = data?.hasMorePages;\n\n  function formatImageUrl(imagePath?: string | null) {\n    return imagePath && configuration ? `${configuration.images.base_url}w780${imagePath}` : undefined;\n  }\n\n  const onIntersect = useCallback(() => {\n    if (hasMorePages) {\n      setQuery((q) => ({ ...q, page: q.page + 1 }));\n    }\n  }, [hasMorePages]);\n\n  const [targetRef] = useIntersectionObserver({ onIntersect });\n\n  const handleAddToFavorites = useCallback(\n    (id: number): void => alert(`Not implemented! Action: ${user?.name} is adding movie ${id} to favorites.`),\n    [user?.name]\n  );\n\n  return (\n    <Grid container spacing={2} sx={{ flexWrap: \"nowrap\", mt: 12 }}>\n      <Grid item xs=\"auto\" sx={{ mt: 6}}>\n        <MoviesFilter\n          onApply={(filters) => {\n            const moviesFilters = {\n              keywords: filters?.keywords.map((k) => k.id),\n              genres: filters?.genres,\n            };\n\n            setQuery({\n              page: 1,\n              filters: moviesFilters,\n            });\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Container sx={{ py: 8 }} maxWidth=\"lg\">\n          {!isFetching && !movies?.length && <Typography variant=\"h6\">No movies were found that match your query.</Typography>}\n          <Grid container spacing={4}>\n            {movies?.map((movie) => (\n              <Grid item key={movie.id} xs={12} sm={6} md={4}>\n                <MovieCard\n                  key={movie.id}\n                  id={movie.id}\n                  title={movie.title}\n                  overview={movie.overview}\n                  popularity={movie.popularity}\n                  image={formatImageUrl(movie.backdrop_path)}\n                  enableUserActions={isAuthenticated}\n                  onAddToFavorite={handleAddToFavorites}\n                />\n              </Grid>\n            ))}\n          </Grid>\n          <div ref={targetRef}>{isFetching && <LinearProgress color=\"primary\" sx={{ mt: 3 }} />}</div>\n        </Container>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Movies;\n\n\n","import { useEffect, useState, useRef, MutableRefObject } from \"react\";\n\n\ninterface Options {\n    root?: null | HTMLElement;\n    rootMargin?: string;\n    threshold?: number;\n    onIntersect?(): void;\n}\n\ntype HookReturnType = [MutableRefObject<null>, IntersectionObserverEntry?];\n\nexport function useIntersectionObserver(options: Options = {}): HookReturnType {\n\n    const { root = null, rootMargin = '0px', threshold = 1.0, onIntersect } = options;\n    const [entry, setEntry] = useState<IntersectionObserverEntry | undefined>();\n    const targetRef = useRef(null);\n\n    useEffect(() => {\n        const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n            const [entry] = entries;\n            if (entry.isIntersecting) { \n                onIntersect?.();\n            }\n            setEntry(entry);\n        }, { root, rootMargin, threshold });\n\n        const currentRef = targetRef.current;\n        if (currentRef) {\n            observer.observe(currentRef);\n        }\n        return function () {\n            if (currentRef) {\n                observer.disconnect();\n            }\n        }\n    }, [root, rootMargin, threshold, onIntersect]);\n\n    return [targetRef, entry];\n}"],"names":["MovieCard","_ref","id","title","overview","popularity","image","enableUserActions","onAddToFavorite","_jsxs","Card","sx","height","display","flexDirection","children","_jsx","CardMedia","component","pt","CardContent","flexGrow","Typography","variant","gutterBottom","color","mt","CardActions","Button","RouterLink","to","concat","Tooltip","IconButton","onClick","FavoriteIcon","memo","MoviesFilter","onApply","control","handleSubmit","formState","useForm","defaultValues","keywords","genres","keywordsQuery","setKeywordsQuery","useState","data","keywordsOptions","isLoading","keywordsLoading","useGetKeywordsQuery","skip","genresLoading","useGetGenresQuery","debouncedFetchKeywordsOptions","useMemo","debounce","query","Paper","m","p","maxWidth","onSubmit","FormControl","Controller","name","render","_ref2","field","onChange","value","Autocomplete","multiple","loading","disablePortal","options","filterOptions","x","getOptionLabel","option","_","isOptionEqualToValue","onInputChange","renderInput","params","TextField","label","Skeleton","width","_Fragment","FormLabel","FormGroup","maxHeight","_ref3","map","genre","FormControlLabel","Checkbox","checked","includes","event","valueNumber","Number","target","filter","type","startIcon","FilterAltOutlinedIcon","disabled","isDirty","initialQuery","page","filters","setQuery","isAuthenticated","user","useAuth0","configuration","useGetConfigurationQuery","isFetching","useGetMoviesQuery","movies","results","hasMorePages","onIntersect","useCallback","q","targetRef","arguments","length","undefined","root","rootMargin","threshold","entry","setEntry","useRef","useEffect","observer","IntersectionObserver","entries","isIntersecting","currentRef","current","observe","disconnect","useIntersectionObserver","handleAddToFavorites","alert","Grid","container","spacing","flexWrap","item","xs","moviesFilters","k","Container","py","movie","sm","md","imagePath","backdrop_path","images","base_url","ref","LinearProgress"],"sourceRoot":""}